type (
	Graph {
		Name  string `json:"name"`
		Desc  string `json:"desc"`
		Nodes int64  `json:"nodes"`
		Edges int64  `json:"edges"`
	}

	Node {
		Name string `json:"name"`
		Desc string `json:"desc"`
		Deg  int64  `json:"deg"`
	}

	Edge {
		Source string `json:"source"`
		Target string `json:"target"`
	}

	SearchAllGraphReply {
		Base   *BaseReply `json:"base"`
		Graphs []*Graph   `json:"graphs"`
	}

	SearchGraphReply {
		Base  *BaseReply `json:"base"`
		Graph *Graph     `json:"graph"`
	}

	SearchNodeReply {
		Base   *BaseReply `json:"base"`
		TaskID int64      `json:"taskId"`
		Status int64      `json:"status"`
		Info   *Node      `json:"node"`
		Nodes  []*Node    `json:"nodes"`
		Edges  []*Edge    `json:"edges"`
	}

	SearchGraphDetailReply {
		Base  *BaseReply `json:"base"`
		Nodes []*Node    `json:"nodes"`
		Edges []*Edge    `json:"edges"`
	}

	BaseReply {
		Status int64             `json:"status"`
		Msg    string            `json:"msg"`
		Extra  map[string]string `json:"extra"`
	}

	SearchRequest {
		Graph string `json:"graph"`
		Min   int64  `json:"min"`
	}

	SearchNodeRequest {
		TaskID   int64  `json:"taskId"`
		Graph    string `json:"graph"`
		Node     string `json:"node"`
		Distance int64  `json:"distance"`
		Min      int64  `json:"min"`
	}

	DropRequest {
		Graph string `json:"graph"`
	}
)
service graph {
	@handler getAllGraph
	get /api/graph/getAll returns (SearchAllGraphReply)
	
	@handler getGraph
	get /api/graph/get (SearchRequest) returns (SearchGraphDetailReply)
	
	@handler getNode
	get /api/node/get (SearchNodeRequest) returns (SearchNodeReply)
	
	@handler dropGraph
	post /api/graph/drop (DropRequest) returns (BaseReply)
	
	// request: file - 文件
	@handler upload
	post /api/graph/upload returns (SearchGraphReply)
}