type (
	BaseReply {
		Status     int64             `json:"status"`
		Msg        string            `json:"msg"`
		TaskID     string            `json:"taskId"`
		TaskStatus int64             `json:"taskStatus"`
		Extra      map[string]string `json:"extra"`
	}
)
type (
	Graph {
		Id       int64  `json:"id"`
		Status   int64  `json:"status"`
		GroupID  int64  `json:"groupId"`
		Name     string `json:"name"`
		Desc     string `json:"desc"`
		NumNode  int64  `json:"numNode"`
		NumEdge  int64  `json:"numEdge"`
		CreatAt  int64  `json:"creatAt"`
		UpdateAt int64  `json:"updateAt"`
	}

	Structure {
		Id            int64   `json:"id"`
		Name          string  `json:"name"`
		Desc          string  `json:"desc"`
		EdgeDirection bool    `json:"edgeDirection"`
		Display       string  `json:"display"`
		Attrs         []*Attr `json:"attrs,optional"`
	}

	Attr {
		Name    string `json:"name"`
		Desc    string `json:"desc"`
		Primary bool   `json:"primary"`
		Type    int64  `json:"type"`
	}

	Pair {
		Key   string `json:"key"`
		Value string `json:"value"`
	}

	Node {
		Id    int64   `json:"id"`
		Deg   int64   `json:"deg"`
		Attrs []*Pair `json:"attrs"`
	}

	MatchNode {
		Id          int64  `json:"id"`
		PrimaryAttr string `json:"primaryAttr"`
	}

	NodePack {
		Tag   string  `json:"tag"`
		Nodes []*Node `json:"nodes"`
	}

	MatchNodePacks {
		Tag   string       `json:"tag"`
		Match []*MatchNode `json:"match"`
	}

	Edge {
		Source int64   `json:"source"`
		Target int64   `json:"target"`
		Attrs  []*Pair `json:"attrs"`
	}

	EdgePack {
		Tag   string  `json:"tag"`
		Edges []*Edge `json:"edges"`
	}

	Group {
		Id           int64        `json:"id"`
		Name         string       `json:"name"`
		Desc         string       `json:"desc"`
		NodeTypeList []*Structure `json:"nodeTypeList"`
		EdgeTypeList []*Structure `json:"edgeTypeList"`
		Graphs       []*Graph     `json:"graphs"`
	}

	GetAllGraphReply {
		Base   *BaseReply `json:"base"`
		Groups []*Group   `json:"groups"`
	}

	GetGraphDetailRequest {
		TaskID  string `form:"taskId,optional"`
		GraphID int64  `form:"graphId"`
		Top     int64  `form:"top"`
		Max     int64  `form:"max,default=2000"`
	}

	GetGraphDetailReply {
		Base      *BaseReply  `json:"base"`
		NodePacks []*NodePack `json:"nodePacks"`
		EdgePacks []*EdgePack `json:"edgePacks"`
	}

	GetNeighborsRequest {
		TaskID string `form:"taskId,optional"`

		GraphID   int64  `form:"graphId"`
		NodeID    int64  `form:"nodeId"`
		Direction string `form:"direction"`
		Max       int64  `form:"max,default=2000"`
	}

	DropGraphRequest {
		GraphID int64 `json:"graphId"`
	}

	CreateGraphRequest {
		TaskID  string `json:"taskId,optional"`
		GraphID int64  `json:"graphId,optional"`

		Graph   string `json:"graph"`
		Desc    string `json:"desc,optional"`
		GroupID int64  `json:"groupId"`
	}

	UpdateGraphRequest {
		TaskID       string  `json:"taskId,optional"`
		GraphID      int64   `json:"graphId"`
		NodeFileList []*Pair `json:"nodeFileList"`
		EdgeFileList []*Pair `json:"edgeFileList"`
	}

	GraphInfoReply {
		Base  *BaseReply `json:"base"`
		Graph *Graph     `json:"graph"`
	}

	GetGraphInfoRequest {
		Name string `form:"name"`
	}

	GetNodesRequest {
		TaskID  string `form:"taskId,optional"`
		GraphID int64  `form:"graphId"`
	}

	GetMatchNodesRequest {
		GraphID  int64  `form:"graphId"`
		Keywords string `form:"keywords"`
	}

	GetMatchNodesReply {
		Base           *BaseReply        `json:"base"`
		MatchNodePacks []*MatchNodePacks `json:"matchNodePacks"`
	}

	GetNodesReply {
		Base      *BaseReply  `json:"base"`
		NodePacks []*NodePack `json:"nodePacks"`
	}

	CreateGroupRequest {
		Name         string       `json:"name"`
		Desc         string       `json:"desc"`
		NodeTypeList []*Structure `json:"nodeTypeList"`
		EdgeTypeList []*Structure `json:"edgeTypeList"`
	}

	GroupInfoReply {
		Base  *BaseReply `json:"base"`
		Group *Group     `json:"group"`
	}

	DropGroupRequest {
		GroupID int64 `json:"groupId"`
	}
)

type (
	PresignedRequest {
		Filename string `form:"filename"`
	}

	PresignedReply {
		Url      string `json:"url"`
		Filename string `json:"filename"`
	}
)

type (
	Task {
		Id         string `json:"id"`
		Idf        string `json:"idf"`
		CreateTime int64  `json:"createTime"`
		UpdateTime int64  `json:"updateTime"`
		Status     int64  `json:"status"`
		Req        string `json:"req"`
		Res        string `json:"res"`
	}

	GetTasksRequest {
		GraphID int64 `form:"graphId"`
	}

	GetTasksReply {
		Base  *BaseReply `json:"base"`
		Tasks []*Task    `json:"tasks"`
	}

	DropTaskRequest {
		TaskID string `json:"taskId,optional"`
	}
)

type (
	Rank {
		Tag   string  `json:"tag"`
		Node  *Node   `json:"node"`
		Score float64 `json:"score"`
	}

	Algo {
		Id       int64        `json:"id"`
		Name     string       `json:"name"`
		Desc     string       `json:"desc"`
		IsCustom bool         `json:"isCustom"`
		Type     int64        `json:"type"`
		Params   []*AlgoParam `json:"params"`
	}

	AlgoParam {
		Key       string  `json:"key"`
		KeyDesc   string  `json:"keyDesc"`
		Type      int64   `json:"type"`
		InitValue float64 `json:"initValue"`
		Max       float64 `json:"max"`
		Min       float64 `json:"min"`
	}

	AlgoRankReply {
		Base  *BaseReply `json:"base"`
		Ranks []*Rank    `json:"ranks"`
		File  string     `json:"file"`
	}

	AlgoMetricReply {
		Base  *BaseReply `json:"base"`
		Score float64    `json:"score"`
	}

	GetAlgoReply {
		Base  *BaseReply `json:"base"`
		Algos []*Algo    `json:"algos"`
	}

	DropAlgoRequest {
		AlgoID int64 `json:"algoId"`
	}

	CreateAlgoRequest {
		Algo       *Algo        `json:"algo"`
		EntryPoint string       `json:"entryPoint"`
		Jar        string       `json:"jar"`
		JVMOpts    []*Pair      `json:"jvmOpts,optional"`
		AlgoParams []*AlgoParam `json:"algoParams,optional"`
	}

	ExecAlgoRequest {
		TaskID  string  `form:"taskId,optional"`
		GraphID int64   `form:"graphId"`
		AlgoID  int64   `form:"algoId"`
		Params  []*Pair `form:"params,optional"`
	}
)

@server(
	prefix: /api/graph
)
service graph {
	@doc "新建策略组"
	@handler createGroup
	post /group/create (CreateGroupRequest) returns (GroupInfoReply)
	
	@doc "删除策略组"
	@handler dropGroup
	post /group/drop (DropGroupRequest) returns (BaseReply)
	
	@doc "新建图"
	@handler createGraph
	post /create (CreateGraphRequest) returns (GraphInfoReply)
	
	@doc "更新图"
	@handler updateGraph
	post /update (UpdateGraphRequest) returns (GraphInfoReply)
	
	@doc "删除图"
	@handler dropGraph
	post /drop (DropGraphRequest) returns (BaseReply)
	
	@doc "获取图列表"
	@handler getAllGraph
	get /getAll returns (GetAllGraphReply)
	
	@doc "根据名称查询图信息"
	@handler getGraphInfo
	get /info (GetGraphInfoRequest) returns (GraphInfoReply)
	
	@doc "获取图的详细边节点信息"
	@handler getGraph
	get /detail (GetGraphDetailRequest) returns (GetGraphDetailReply)
	
	@doc "获得全部节点"
	@handler getNodes
	get /node/getAll (GetNodesRequest) returns (GetNodesReply)
	
	@doc "获得匹配节点"
	@handler getMatchNodes
	get /node/getMatch (GetMatchNodesRequest) returns (GetMatchNodesReply)
	
	@doc "获取节点信息及邻居节点"
	@handler getNeighbors
	get /node/nbr (GetNeighborsRequest) returns (GetGraphDetailReply)
}

@server(
	prefix: /api/graph/task
)
service graph {
	@doc "获取图计算任务"
	@handler getGraphTasks
	get /task/getAll (GetTasksRequest) returns (GetTasksReply)
	
	@doc "删除任务"
	@handler dropTask
	post /drop (DropTaskRequest) returns (BaseReply)
}

@server(
	prefix: /api/graph/algo
)
service graph {
	@doc "查询算法"
	@handler algoGetAll
	get /algo/getAll returns (GetAlgoReply)
	
	@doc "创建算法"
	@handler algoCreate
	post /algo/create (CreateAlgoRequest) returns (BaseReply)
	
	@doc "删除算法"
	@handler algoDrop
	post /algo/drop (DropAlgoRequest) returns (BaseReply)
	
	@doc "执行排序算法"
	@handler algoExecRank
	get /algo/exec/rank (ExecAlgoRequest) returns (AlgoRankReply)
	
	@doc "执行指标算法"
	@handler algoExecScore
	get /algo/exec/score (ExecAlgoRequest) returns (AlgoMetricReply)
}

@server(
	prefix: /api/graph/file
)
service graph {
	@doc "获得图源文件上传链接"
	@handler fileSourcePutPresigned
	get /put/source returns (PresignedReply)
	
	@doc "获得算法库文件上传链接"
	@handler fileLibPutPresigned
	get /put/lib returns (PresignedReply)
	
	@doc "获得文件下载链接"
	@handler fileAlgoGetPresigned
	get /get/algo (PresignedRequest) returns (PresignedReply)
}