type (
	Graph {
		Id     int64  `json:"id"`
		Status int    `json:"status"`
		Name   string `json:"name"`
		Desc   string `json:"desc"`
		Nodes  int64  `json:"nodes"`
		Edges  int64  `json:"edges"`
	}

	Node {
		ID   int64  `json:"id"`
		Name string `json:"name"`
		Desc string `json:"desc"`
		Deg  int64  `json:"deg"`
	}

	Edge {
		Source int64 `json:"source"`
		Target int64 `json:"target"`
	}

	Param {
		Key   string `json:"key"`
		Value string `json:"value"`
	}

	Task {
		Id         int64       `json:"id"`
		Idf        int64       `json:"idf"`
		Desc       string      `json:"desc"`
		CreateTime int64       `json:"createTime"`
		UpdateTime int64       `json:"updateTime"`
		Status     int64       `json:"status"`
		Req        interface{} `json:"req"`
		Res        interface{} `json:"res"`
	}

	Rank {
		NodeID int64   `json:"nodeId"`
		Score  float64 `json:"score"`
	}

	Algo {
		Id       int64      `json:"id"`
		Name     string     `json:"name"`
		Desc     string     `json:"desc"`
		IsCustom bool       `json:"isCustom"`
		Type     int64      `json:"type"`
		Params   []*Element `json:"params"`
	}

	Element {
		Key     string `json:"key"`
		KeyDesc string `json:"keyDesc"`
		Type    int64  `json:"type"`
	}

	BaseReply {
		Status     int64             `json:"status"`
		Msg        string            `json:"msg"`
		TaskID     int64             `json:"taskId"`
		TaskStatus int64             `json:"taskStatus"`
		Extra      map[string]string `json:"extra"`
	}

	SearchTasksReply {
		Base  *BaseReply `json:"base"`
		Tasks []*Task    `json:"tasks"`
	}

	SearchAllGraphReply {
		Base   *BaseReply `json:"base"`
		Graphs []*Graph   `json:"graphs"`
	}

	SearchGraphReply {
		Base  *BaseReply `json:"base"`
		Graph *Graph     `json:"graph"`
	}

	SearchNodeReply {
		Base  *BaseReply `json:"base"`
		Info  *Node      `json:"node"`
		Nodes []*Node    `json:"nodes"`
		Edges []*Edge    `json:"edges"`
	}

	SearchGraphDetailReply {
		Base  *BaseReply `json:"base"`
		Nodes []*Node    `json:"nodes"`
		Edges []*Edge    `json:"edges"`
	}

	AlgoRankReply {
		Base  *BaseReply `json:"base"`
		Ranks []*Rank    `json:"ranks"`
		File  string     `json:"file"`
	}

	AlgoMetricReply {
		Base  *BaseReply `json:"base"`
		Score float64    `json:"score"`
	}

	AlgoReply {
		Base  *BaseReply `json:"base"`
		Algos []*Algo    `json:"algos"`
	}

	SearchTasksRequest {
		GraphID int64 `form:"graphId"`
	}

	SearchRequest {
		TaskID  int64 `form:"taskId,optional"`
		GraphID int64 `form:"graphId"`
		Min     int64 `form:"min"`
	}

	SearchNodeRequest {
		TaskID int64 `form:"taskId,optional"`

		GraphID  int64 `form:"graphId"`
		NodeID   int64 `form:"nodeId"`
		Distance int64 `form:"distance"`
		Min      int64 `form:"min"`
	}

	DropRequest {
		GraphID int64 `json:"graphId"`
	}

	UploadEmptyRequest {
		Graph string `json:"graph"`
		Desc  string `json:"desc,optional"`
	}

	UploadRequest {

		TaskID int64  `json:"taskId,optional"`
		Graph  string `json:"graph"`
		Desc   string `json:"desc,optional"`

		NodeID string `json:"nodeId"`
		EdgeID string `json:"edgeId"`

		GraphID int64 `json:"graphId,optional"`
	}

	AlgoRequest {
		TaskID  int64 `form:"taskId,optional"`
		GraphID int64 `form:"graphId"`
	}

	AlgoDegreeRequest {
		TaskID  int64 `form:"taskId,optional"`
		GraphID int64 `form:"graphId"`
	}

	AlgoPageRankRequest {
		TaskID  int64   `form:"taskId,optional"`
		GraphID int64   `form:"graphId"`
		Iter    int64   `form:"iter,default=3"`
		Prob    float64 `form:"prob,default=0.85"`
	}

	AlgoVoteRankRequest {
		TaskID  int64 `form:"taskId,optional"`
		GraphID int64 `form:"graphId"`
		Iter    int64 `form:"iter,default=100"`
	}

	AlgoLouvainRequest {
		TaskID       int64   `form:"taskId,optional"`
		GraphID      int64   `form:"graphId"`
		MaxIter      int64   `form:"maxIter,default=10"`
		InternalIter int64   `form:"internalIter,default=5"`
		Tol          float64 `form:"tol,default=0.5"`
	}


	GetGraphInfoBody {
		Name string `form:"name"`
		Id   int64  `form:"id"`
	}

	NodeReduce {
		Name string `json:"name"`
		Id   int64  `form:"id"`
	}

	NodesInfo {
		Nodes []NodeReduce `form:"nodes"`
	}

	GetNodeReduceRequest {
		Id int64 `form:"id"`
	}
	DropTaskRequest {
		TaskID int64 `json:"taskId,optional"`
	}
)

@server(
	prefix: /api/graph
)
service graph {
	@doc "获取图列表"
	@handler getAllGraph
	get /getAll returns (SearchAllGraphReply)
	
	@doc "获取图的详细节点信息"
	@handler getGraph
	get /get (SearchRequest) returns (SearchGraphDetailReply)
	
	@doc "获取节点信息及邻居节点"
	@handler getNeighbors
	get /node/get (SearchNodeRequest) returns (SearchNodeReply)
	
	@doc "删除图"
	@handler dropGraph
	post /drop (DropRequest) returns (BaseReply)
	
	@doc "上传图"
	@handler createGraph
	post /create (UploadRequest) returns (SearchGraphReply)
	
	@doc "度中心度算法"
	@handler algoDegree
	get /algo/degree (AlgoDegreeRequest) returns (AlgoRankReply)
	
	@doc "PageRank算法"
	@handler algoPageRank
	get /algo/pr (AlgoPageRankRequest) returns (AlgoRankReply)
	
	@doc "VoteRank算法"
	@handler algoVoteRank
	get /algo/vr (AlgoVoteRankRequest) returns (AlgoRankReply)
	
	@doc "Betweenness算法"
	@handler algoBetweenness
	get /algo/betweenness (AlgoRequest) returns (AlgoRankReply)
	
	@doc "Closeness算法"
	@handler algoCloseness
	get /algo/closeness (AlgoRequest) returns (AlgoRankReply)
	
	@doc "平均聚类系数"
	@handler algoAvgCC
	get /algo/avgCC (AlgoRequest) returns (AlgoMetricReply)
	
	@doc "Louvain聚类算法"
	@handler algoLouvain
	get /algo/louvain (AlgoLouvainRequest) returns (AlgoRankReply)
	
	@doc "获取图计算任务"
	@handler getGraphTasks
	get /task/getAll (SearchTasksRequest) returns (SearchTasksReply)
	
	@doc "删除任务"
	@handler dropTask
	post /task/drop (DropTaskRequest) returns (BaseReply)
	
	@doc "创建空图"
	@handler createEmptyGraph
	post /createEmpty (UploadEmptyRequest) returns (SearchGraphReply)
	

	@doc "由图名称获得图id"
	@handler getGraphInfo
	post /getGraphInfo (GetGraphInfoBody) returns (GetGraphInfoBody)
	
	@doc "获得节点id信息"
	@handler getNodesInfo
	post /getNodesInfo (GetNodeReduceRequest) returns (NodesInfo)

	@doc "查询算法"
	@handler algoGetAll
	get /algo/getAll returns (AlgoReply)
	

}