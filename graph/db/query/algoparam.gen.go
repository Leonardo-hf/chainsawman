// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chainsawman/graph/model"
)

func newAlgoParam(db *gorm.DB, opts ...gen.DOOption) algoParam {
	_algoParam := algoParam{}

	_algoParam.algoParamDo.UseDB(db, opts...)
	_algoParam.algoParamDo.UseModel(&model.AlgoParam{})

	tableName := _algoParam.algoParamDo.TableName()
	_algoParam.ALL = field.NewAsterisk(tableName)
	_algoParam.ID = field.NewInt64(tableName, "id")
	_algoParam.AlgoID = field.NewInt64(tableName, "algoID")
	_algoParam.FieldName = field.NewString(tableName, "fieldName")
	_algoParam.FieldType = field.NewInt64(tableName, "fieldType")

	_algoParam.fillFieldMap()

	return _algoParam
}

type algoParam struct {
	algoParamDo

	ALL       field.Asterisk
	ID        field.Int64
	AlgoID    field.Int64
	FieldName field.String
	FieldType field.Int64

	fieldMap map[string]field.Expr
}

func (a algoParam) Table(newTableName string) *algoParam {
	a.algoParamDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a algoParam) As(alias string) *algoParam {
	a.algoParamDo.DO = *(a.algoParamDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *algoParam) updateTableName(table string) *algoParam {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AlgoID = field.NewInt64(table, "algoID")
	a.FieldName = field.NewString(table, "fieldName")
	a.FieldType = field.NewInt64(table, "fieldType")

	a.fillFieldMap()

	return a
}

func (a *algoParam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *algoParam) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["algoID"] = a.AlgoID
	a.fieldMap["fieldName"] = a.FieldName
	a.fieldMap["fieldType"] = a.FieldType
}

func (a algoParam) clone(db *gorm.DB) algoParam {
	a.algoParamDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a algoParam) replaceDB(db *gorm.DB) algoParam {
	a.algoParamDo.ReplaceDB(db)
	return a
}

type algoParamDo struct{ gen.DO }

type IAlgoParamDo interface {
	gen.SubQuery
	Debug() IAlgoParamDo
	WithContext(ctx context.Context) IAlgoParamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlgoParamDo
	WriteDB() IAlgoParamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlgoParamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlgoParamDo
	Not(conds ...gen.Condition) IAlgoParamDo
	Or(conds ...gen.Condition) IAlgoParamDo
	Select(conds ...field.Expr) IAlgoParamDo
	Where(conds ...gen.Condition) IAlgoParamDo
	Order(conds ...field.Expr) IAlgoParamDo
	Distinct(cols ...field.Expr) IAlgoParamDo
	Omit(cols ...field.Expr) IAlgoParamDo
	Join(table schema.Tabler, on ...field.Expr) IAlgoParamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlgoParamDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlgoParamDo
	Group(cols ...field.Expr) IAlgoParamDo
	Having(conds ...gen.Condition) IAlgoParamDo
	Limit(limit int) IAlgoParamDo
	Offset(offset int) IAlgoParamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlgoParamDo
	Unscoped() IAlgoParamDo
	Create(values ...*model.AlgoParam) error
	CreateInBatches(values []*model.AlgoParam, batchSize int) error
	Save(values ...*model.AlgoParam) error
	First() (*model.AlgoParam, error)
	Take() (*model.AlgoParam, error)
	Last() (*model.AlgoParam, error)
	Find() ([]*model.AlgoParam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlgoParam, err error)
	FindInBatches(result *[]*model.AlgoParam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlgoParam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlgoParamDo
	Assign(attrs ...field.AssignExpr) IAlgoParamDo
	Joins(fields ...field.RelationField) IAlgoParamDo
	Preload(fields ...field.RelationField) IAlgoParamDo
	FirstOrInit() (*model.AlgoParam, error)
	FirstOrCreate() (*model.AlgoParam, error)
	FindByPage(offset int, limit int) (result []*model.AlgoParam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlgoParamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a algoParamDo) Debug() IAlgoParamDo {
	return a.withDO(a.DO.Debug())
}

func (a algoParamDo) WithContext(ctx context.Context) IAlgoParamDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a algoParamDo) ReadDB() IAlgoParamDo {
	return a.Clauses(dbresolver.Read)
}

func (a algoParamDo) WriteDB() IAlgoParamDo {
	return a.Clauses(dbresolver.Write)
}

func (a algoParamDo) Session(config *gorm.Session) IAlgoParamDo {
	return a.withDO(a.DO.Session(config))
}

func (a algoParamDo) Clauses(conds ...clause.Expression) IAlgoParamDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a algoParamDo) Returning(value interface{}, columns ...string) IAlgoParamDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a algoParamDo) Not(conds ...gen.Condition) IAlgoParamDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a algoParamDo) Or(conds ...gen.Condition) IAlgoParamDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a algoParamDo) Select(conds ...field.Expr) IAlgoParamDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a algoParamDo) Where(conds ...gen.Condition) IAlgoParamDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a algoParamDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAlgoParamDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a algoParamDo) Order(conds ...field.Expr) IAlgoParamDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a algoParamDo) Distinct(cols ...field.Expr) IAlgoParamDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a algoParamDo) Omit(cols ...field.Expr) IAlgoParamDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a algoParamDo) Join(table schema.Tabler, on ...field.Expr) IAlgoParamDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a algoParamDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlgoParamDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a algoParamDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlgoParamDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a algoParamDo) Group(cols ...field.Expr) IAlgoParamDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a algoParamDo) Having(conds ...gen.Condition) IAlgoParamDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a algoParamDo) Limit(limit int) IAlgoParamDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a algoParamDo) Offset(offset int) IAlgoParamDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a algoParamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlgoParamDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a algoParamDo) Unscoped() IAlgoParamDo {
	return a.withDO(a.DO.Unscoped())
}

func (a algoParamDo) Create(values ...*model.AlgoParam) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a algoParamDo) CreateInBatches(values []*model.AlgoParam, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a algoParamDo) Save(values ...*model.AlgoParam) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a algoParamDo) First() (*model.AlgoParam, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgoParam), nil
	}
}

func (a algoParamDo) Take() (*model.AlgoParam, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgoParam), nil
	}
}

func (a algoParamDo) Last() (*model.AlgoParam, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgoParam), nil
	}
}

func (a algoParamDo) Find() ([]*model.AlgoParam, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlgoParam), err
}

func (a algoParamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlgoParam, err error) {
	buf := make([]*model.AlgoParam, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a algoParamDo) FindInBatches(result *[]*model.AlgoParam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a algoParamDo) Attrs(attrs ...field.AssignExpr) IAlgoParamDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a algoParamDo) Assign(attrs ...field.AssignExpr) IAlgoParamDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a algoParamDo) Joins(fields ...field.RelationField) IAlgoParamDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a algoParamDo) Preload(fields ...field.RelationField) IAlgoParamDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a algoParamDo) FirstOrInit() (*model.AlgoParam, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgoParam), nil
	}
}

func (a algoParamDo) FirstOrCreate() (*model.AlgoParam, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgoParam), nil
	}
}

func (a algoParamDo) FindByPage(offset int, limit int) (result []*model.AlgoParam, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a algoParamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a algoParamDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a algoParamDo) Delete(models ...*model.AlgoParam) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *algoParamDo) withDO(do gen.Dao) *algoParamDo {
	a.DO = *do.(*gen.DO)
	return a
}
