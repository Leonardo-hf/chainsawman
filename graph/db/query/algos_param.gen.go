// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chainsawman/graph/model"
)

func newAlgosParam(db *gorm.DB, opts ...gen.DOOption) algosParam {
	_algosParam := algosParam{}

	_algosParam.algosParamDo.UseDB(db, opts...)
	_algosParam.algosParamDo.UseModel(&model.AlgosParam{})

	tableName := _algosParam.algosParamDo.TableName()
	_algosParam.ALL = field.NewAsterisk(tableName)
	_algosParam.ID = field.NewInt64(tableName, "id")
	_algosParam.AlgoID = field.NewInt64(tableName, "algoID")
	_algosParam.FieldName = field.NewString(tableName, "fieldName")
	_algosParam.FieldDesc = field.NewString(tableName, "fieldDesc")
	_algosParam.FieldType = field.NewInt64(tableName, "fieldType")
	_algosParam.InitValue = field.NewFloat64(tableName, "initValue")
	_algosParam.Max = field.NewFloat64(tableName, "max")
	_algosParam.Min = field.NewFloat64(tableName, "min")

	_algosParam.fillFieldMap()

	return _algosParam
}

type algosParam struct {
	algosParamDo

	ALL       field.Asterisk
	ID        field.Int64
	AlgoID    field.Int64
	FieldName field.String
	FieldDesc field.String
	FieldType field.Int64
	InitValue field.Float64
	Max       field.Float64
	Min       field.Float64

	fieldMap map[string]field.Expr
}

func (a algosParam) Table(newTableName string) *algosParam {
	a.algosParamDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a algosParam) As(alias string) *algosParam {
	a.algosParamDo.DO = *(a.algosParamDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *algosParam) updateTableName(table string) *algosParam {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AlgoID = field.NewInt64(table, "algoID")
	a.FieldName = field.NewString(table, "fieldName")
	a.FieldDesc = field.NewString(table, "fieldDesc")
	a.FieldType = field.NewInt64(table, "fieldType")
	a.InitValue = field.NewFloat64(table, "initValue")
	a.Max = field.NewFloat64(table, "max")
	a.Min = field.NewFloat64(table, "min")

	a.fillFieldMap()

	return a
}

func (a *algosParam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *algosParam) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["algoID"] = a.AlgoID
	a.fieldMap["fieldName"] = a.FieldName
	a.fieldMap["fieldDesc"] = a.FieldDesc
	a.fieldMap["fieldType"] = a.FieldType
	a.fieldMap["initValue"] = a.InitValue
	a.fieldMap["max"] = a.Max
	a.fieldMap["min"] = a.Min
}

func (a algosParam) clone(db *gorm.DB) algosParam {
	a.algosParamDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a algosParam) replaceDB(db *gorm.DB) algosParam {
	a.algosParamDo.ReplaceDB(db)
	return a
}

type algosParamDo struct{ gen.DO }

type IAlgosParamDo interface {
	gen.SubQuery
	Debug() IAlgosParamDo
	WithContext(ctx context.Context) IAlgosParamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlgosParamDo
	WriteDB() IAlgosParamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlgosParamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlgosParamDo
	Not(conds ...gen.Condition) IAlgosParamDo
	Or(conds ...gen.Condition) IAlgosParamDo
	Select(conds ...field.Expr) IAlgosParamDo
	Where(conds ...gen.Condition) IAlgosParamDo
	Order(conds ...field.Expr) IAlgosParamDo
	Distinct(cols ...field.Expr) IAlgosParamDo
	Omit(cols ...field.Expr) IAlgosParamDo
	Join(table schema.Tabler, on ...field.Expr) IAlgosParamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlgosParamDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlgosParamDo
	Group(cols ...field.Expr) IAlgosParamDo
	Having(conds ...gen.Condition) IAlgosParamDo
	Limit(limit int) IAlgosParamDo
	Offset(offset int) IAlgosParamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlgosParamDo
	Unscoped() IAlgosParamDo
	Create(values ...*model.AlgosParam) error
	CreateInBatches(values []*model.AlgosParam, batchSize int) error
	Save(values ...*model.AlgosParam) error
	First() (*model.AlgosParam, error)
	Take() (*model.AlgosParam, error)
	Last() (*model.AlgosParam, error)
	Find() ([]*model.AlgosParam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlgosParam, err error)
	FindInBatches(result *[]*model.AlgosParam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlgosParam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlgosParamDo
	Assign(attrs ...field.AssignExpr) IAlgosParamDo
	Joins(fields ...field.RelationField) IAlgosParamDo
	Preload(fields ...field.RelationField) IAlgosParamDo
	FirstOrInit() (*model.AlgosParam, error)
	FirstOrCreate() (*model.AlgosParam, error)
	FindByPage(offset int, limit int) (result []*model.AlgosParam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlgosParamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a algosParamDo) Debug() IAlgosParamDo {
	return a.withDO(a.DO.Debug())
}

func (a algosParamDo) WithContext(ctx context.Context) IAlgosParamDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a algosParamDo) ReadDB() IAlgosParamDo {
	return a.Clauses(dbresolver.Read)
}

func (a algosParamDo) WriteDB() IAlgosParamDo {
	return a.Clauses(dbresolver.Write)
}

func (a algosParamDo) Session(config *gorm.Session) IAlgosParamDo {
	return a.withDO(a.DO.Session(config))
}

func (a algosParamDo) Clauses(conds ...clause.Expression) IAlgosParamDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a algosParamDo) Returning(value interface{}, columns ...string) IAlgosParamDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a algosParamDo) Not(conds ...gen.Condition) IAlgosParamDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a algosParamDo) Or(conds ...gen.Condition) IAlgosParamDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a algosParamDo) Select(conds ...field.Expr) IAlgosParamDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a algosParamDo) Where(conds ...gen.Condition) IAlgosParamDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a algosParamDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAlgosParamDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a algosParamDo) Order(conds ...field.Expr) IAlgosParamDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a algosParamDo) Distinct(cols ...field.Expr) IAlgosParamDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a algosParamDo) Omit(cols ...field.Expr) IAlgosParamDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a algosParamDo) Join(table schema.Tabler, on ...field.Expr) IAlgosParamDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a algosParamDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlgosParamDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a algosParamDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlgosParamDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a algosParamDo) Group(cols ...field.Expr) IAlgosParamDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a algosParamDo) Having(conds ...gen.Condition) IAlgosParamDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a algosParamDo) Limit(limit int) IAlgosParamDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a algosParamDo) Offset(offset int) IAlgosParamDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a algosParamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlgosParamDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a algosParamDo) Unscoped() IAlgosParamDo {
	return a.withDO(a.DO.Unscoped())
}

func (a algosParamDo) Create(values ...*model.AlgosParam) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a algosParamDo) CreateInBatches(values []*model.AlgosParam, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a algosParamDo) Save(values ...*model.AlgosParam) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a algosParamDo) First() (*model.AlgosParam, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgosParam), nil
	}
}

func (a algosParamDo) Take() (*model.AlgosParam, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgosParam), nil
	}
}

func (a algosParamDo) Last() (*model.AlgosParam, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgosParam), nil
	}
}

func (a algosParamDo) Find() ([]*model.AlgosParam, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlgosParam), err
}

func (a algosParamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlgosParam, err error) {
	buf := make([]*model.AlgosParam, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a algosParamDo) FindInBatches(result *[]*model.AlgosParam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a algosParamDo) Attrs(attrs ...field.AssignExpr) IAlgosParamDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a algosParamDo) Assign(attrs ...field.AssignExpr) IAlgosParamDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a algosParamDo) Joins(fields ...field.RelationField) IAlgosParamDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a algosParamDo) Preload(fields ...field.RelationField) IAlgosParamDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a algosParamDo) FirstOrInit() (*model.AlgosParam, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgosParam), nil
	}
}

func (a algosParamDo) FirstOrCreate() (*model.AlgosParam, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlgosParam), nil
	}
}

func (a algosParamDo) FindByPage(offset int, limit int) (result []*model.AlgosParam, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a algosParamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a algosParamDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a algosParamDo) Delete(models ...*model.AlgosParam) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *algosParamDo) withDO(do gen.Dao) *algosParamDo {
	a.DO = *do.(*gen.DO)
	return a
}
