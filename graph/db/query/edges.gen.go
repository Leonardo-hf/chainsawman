// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chainsawman/graph/model"
)

func newEdge(db *gorm.DB, opts ...gen.DOOption) edge {
	_edge := edge{}

	_edge.edgeDo.UseDB(db, opts...)
	_edge.edgeDo.UseModel(&model.Edge{})

	tableName := _edge.edgeDo.TableName()
	_edge.ALL = field.NewAsterisk(tableName)
	_edge.ID = field.NewInt64(tableName, "id")
	_edge.GroupID = field.NewInt64(tableName, "groupID")
	_edge.Name = field.NewString(tableName, "name")
	_edge.Desc = field.NewString(tableName, "desc")
	_edge.Direct = field.NewInt64(tableName, "direct")
	_edge.Display = field.NewString(tableName, "display")
	_edge.EdgeAttrs = edgeHasManyEdgeAttrs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("EdgeAttrs", "model.EdgesAttr"),
	}

	_edge.fillFieldMap()

	return _edge
}

type edge struct {
	edgeDo

	ALL       field.Asterisk
	ID        field.Int64
	GroupID   field.Int64
	Name      field.String
	Desc      field.String
	Direct    field.Int64
	Display   field.String
	EdgeAttrs edgeHasManyEdgeAttrs

	fieldMap map[string]field.Expr
}

func (e edge) Table(newTableName string) *edge {
	e.edgeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e edge) As(alias string) *edge {
	e.edgeDo.DO = *(e.edgeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *edge) updateTableName(table string) *edge {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.GroupID = field.NewInt64(table, "groupID")
	e.Name = field.NewString(table, "name")
	e.Desc = field.NewString(table, "desc")
	e.Direct = field.NewInt64(table, "direct")
	e.Display = field.NewString(table, "display")

	e.fillFieldMap()

	return e
}

func (e *edge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *edge) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["groupID"] = e.GroupID
	e.fieldMap["name"] = e.Name
	e.fieldMap["desc"] = e.Desc
	e.fieldMap["direct"] = e.Direct
	e.fieldMap["display"] = e.Display

}

func (e edge) clone(db *gorm.DB) edge {
	e.edgeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e edge) replaceDB(db *gorm.DB) edge {
	e.edgeDo.ReplaceDB(db)
	return e
}

type edgeHasManyEdgeAttrs struct {
	db *gorm.DB

	field.RelationField
}

func (a edgeHasManyEdgeAttrs) Where(conds ...field.Expr) *edgeHasManyEdgeAttrs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a edgeHasManyEdgeAttrs) WithContext(ctx context.Context) *edgeHasManyEdgeAttrs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a edgeHasManyEdgeAttrs) Session(session *gorm.Session) *edgeHasManyEdgeAttrs {
	a.db = a.db.Session(session)
	return &a
}

func (a edgeHasManyEdgeAttrs) Model(m *model.Edge) *edgeHasManyEdgeAttrsTx {
	return &edgeHasManyEdgeAttrsTx{a.db.Model(m).Association(a.Name())}
}

type edgeHasManyEdgeAttrsTx struct{ tx *gorm.Association }

func (a edgeHasManyEdgeAttrsTx) Find() (result []*model.EdgesAttr, err error) {
	return result, a.tx.Find(&result)
}

func (a edgeHasManyEdgeAttrsTx) Append(values ...*model.EdgesAttr) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a edgeHasManyEdgeAttrsTx) Replace(values ...*model.EdgesAttr) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a edgeHasManyEdgeAttrsTx) Delete(values ...*model.EdgesAttr) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a edgeHasManyEdgeAttrsTx) Clear() error {
	return a.tx.Clear()
}

func (a edgeHasManyEdgeAttrsTx) Count() int64 {
	return a.tx.Count()
}

type edgeDo struct{ gen.DO }

type IEdgeDo interface {
	gen.SubQuery
	Debug() IEdgeDo
	WithContext(ctx context.Context) IEdgeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEdgeDo
	WriteDB() IEdgeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEdgeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEdgeDo
	Not(conds ...gen.Condition) IEdgeDo
	Or(conds ...gen.Condition) IEdgeDo
	Select(conds ...field.Expr) IEdgeDo
	Where(conds ...gen.Condition) IEdgeDo
	Order(conds ...field.Expr) IEdgeDo
	Distinct(cols ...field.Expr) IEdgeDo
	Omit(cols ...field.Expr) IEdgeDo
	Join(table schema.Tabler, on ...field.Expr) IEdgeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEdgeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEdgeDo
	Group(cols ...field.Expr) IEdgeDo
	Having(conds ...gen.Condition) IEdgeDo
	Limit(limit int) IEdgeDo
	Offset(offset int) IEdgeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEdgeDo
	Unscoped() IEdgeDo
	Create(values ...*model.Edge) error
	CreateInBatches(values []*model.Edge, batchSize int) error
	Save(values ...*model.Edge) error
	First() (*model.Edge, error)
	Take() (*model.Edge, error)
	Last() (*model.Edge, error)
	Find() ([]*model.Edge, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Edge, err error)
	FindInBatches(result *[]*model.Edge, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Edge) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEdgeDo
	Assign(attrs ...field.AssignExpr) IEdgeDo
	Joins(fields ...field.RelationField) IEdgeDo
	Preload(fields ...field.RelationField) IEdgeDo
	FirstOrInit() (*model.Edge, error)
	FirstOrCreate() (*model.Edge, error)
	FindByPage(offset int, limit int) (result []*model.Edge, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEdgeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e edgeDo) Debug() IEdgeDo {
	return e.withDO(e.DO.Debug())
}

func (e edgeDo) WithContext(ctx context.Context) IEdgeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e edgeDo) ReadDB() IEdgeDo {
	return e.Clauses(dbresolver.Read)
}

func (e edgeDo) WriteDB() IEdgeDo {
	return e.Clauses(dbresolver.Write)
}

func (e edgeDo) Session(config *gorm.Session) IEdgeDo {
	return e.withDO(e.DO.Session(config))
}

func (e edgeDo) Clauses(conds ...clause.Expression) IEdgeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e edgeDo) Returning(value interface{}, columns ...string) IEdgeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e edgeDo) Not(conds ...gen.Condition) IEdgeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e edgeDo) Or(conds ...gen.Condition) IEdgeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e edgeDo) Select(conds ...field.Expr) IEdgeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e edgeDo) Where(conds ...gen.Condition) IEdgeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e edgeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEdgeDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e edgeDo) Order(conds ...field.Expr) IEdgeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e edgeDo) Distinct(cols ...field.Expr) IEdgeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e edgeDo) Omit(cols ...field.Expr) IEdgeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e edgeDo) Join(table schema.Tabler, on ...field.Expr) IEdgeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e edgeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEdgeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e edgeDo) RightJoin(table schema.Tabler, on ...field.Expr) IEdgeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e edgeDo) Group(cols ...field.Expr) IEdgeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e edgeDo) Having(conds ...gen.Condition) IEdgeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e edgeDo) Limit(limit int) IEdgeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e edgeDo) Offset(offset int) IEdgeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e edgeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEdgeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e edgeDo) Unscoped() IEdgeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e edgeDo) Create(values ...*model.Edge) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e edgeDo) CreateInBatches(values []*model.Edge, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e edgeDo) Save(values ...*model.Edge) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e edgeDo) First() (*model.Edge, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) Take() (*model.Edge, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) Last() (*model.Edge, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) Find() ([]*model.Edge, error) {
	result, err := e.DO.Find()
	return result.([]*model.Edge), err
}

func (e edgeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Edge, err error) {
	buf := make([]*model.Edge, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e edgeDo) FindInBatches(result *[]*model.Edge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e edgeDo) Attrs(attrs ...field.AssignExpr) IEdgeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e edgeDo) Assign(attrs ...field.AssignExpr) IEdgeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e edgeDo) Joins(fields ...field.RelationField) IEdgeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e edgeDo) Preload(fields ...field.RelationField) IEdgeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e edgeDo) FirstOrInit() (*model.Edge, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) FirstOrCreate() (*model.Edge, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) FindByPage(offset int, limit int) (result []*model.Edge, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e edgeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e edgeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e edgeDo) Delete(models ...*model.Edge) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *edgeDo) withDO(do gen.Dao) *edgeDo {
	e.DO = *do.(*gen.DO)
	return e
}
