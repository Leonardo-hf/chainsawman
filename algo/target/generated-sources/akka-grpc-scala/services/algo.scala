
// Generated by Akka gRPC. DO NOT EDIT.
package services

import akka.annotation.ApiMayChange

import akka.grpc.AkkaGrpcGenerated


@AkkaGrpcGenerated
trait algo {
  
  
  def createAlgo(in: services.CreateAlgoReq): scala.concurrent.Future[services.AlgoReply]
  
  
  def queryAlgo(in: services.Empty): scala.concurrent.Future[services.AlgoReply]
  
  
  def dropAlgo(in: services.DropAlgoReq): scala.concurrent.Future[services.AlgoReply]
  
  
  def degree(in: services.BaseReq): scala.concurrent.Future[services.RankReply]
  
  
  def pagerank(in: services.BaseReq): scala.concurrent.Future[services.RankReply]
  
  
  def louvain(in: services.BaseReq): scala.concurrent.Future[services.ClusterReply]
  
  
  def shortestPath(in: services.ShortestPathReq): scala.concurrent.Future[services.ClusterReply]
  
  
  def avgShortestPath(in: services.BaseReq): scala.concurrent.Future[services.MetricsReply]
  
  
  def avgClustering(in: services.BaseReq): scala.concurrent.Future[services.MetricsReply]
  
  
  def custom(in: services.CustomAlgoReq): scala.concurrent.Future[services.CustomAlgoReply]
  
}



@AkkaGrpcGenerated
object algo extends akka.grpc.ServiceDescription {
  val name = "services.algo"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    services.AlgoProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val CreateAlgoReqSerializer = new ScalapbProtobufSerializer(services.CreateAlgoReq.messageCompanion)
    
    val EmptySerializer = new ScalapbProtobufSerializer(services.Empty.messageCompanion)
    
    val DropAlgoReqSerializer = new ScalapbProtobufSerializer(services.DropAlgoReq.messageCompanion)
    
    val BaseReqSerializer = new ScalapbProtobufSerializer(services.BaseReq.messageCompanion)
    
    val ShortestPathReqSerializer = new ScalapbProtobufSerializer(services.ShortestPathReq.messageCompanion)
    
    val CustomAlgoReqSerializer = new ScalapbProtobufSerializer(services.CustomAlgoReq.messageCompanion)
    
    val AlgoReplySerializer = new ScalapbProtobufSerializer(services.AlgoReply.messageCompanion)
    
    val RankReplySerializer = new ScalapbProtobufSerializer(services.RankReply.messageCompanion)
    
    val ClusterReplySerializer = new ScalapbProtobufSerializer(services.ClusterReply.messageCompanion)
    
    val MetricsReplySerializer = new ScalapbProtobufSerializer(services.MetricsReply.messageCompanion)
    
    val CustomAlgoReplySerializer = new ScalapbProtobufSerializer(services.CustomAlgoReply.messageCompanion)
    
  }

  @ApiMayChange
  @AkkaGrpcGenerated
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    
    val createAlgoDescriptor: MethodDescriptor[services.CreateAlgoReq, services.AlgoReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "createAlgo"))
        .setRequestMarshaller(new Marshaller(CreateAlgoReqSerializer))
        .setResponseMarshaller(new Marshaller(AlgoReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val queryAlgoDescriptor: MethodDescriptor[services.Empty, services.AlgoReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "queryAlgo"))
        .setRequestMarshaller(new Marshaller(EmptySerializer))
        .setResponseMarshaller(new Marshaller(AlgoReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val dropAlgoDescriptor: MethodDescriptor[services.DropAlgoReq, services.AlgoReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "dropAlgo"))
        .setRequestMarshaller(new Marshaller(DropAlgoReqSerializer))
        .setResponseMarshaller(new Marshaller(AlgoReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val degreeDescriptor: MethodDescriptor[services.BaseReq, services.RankReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "degree"))
        .setRequestMarshaller(new Marshaller(BaseReqSerializer))
        .setResponseMarshaller(new Marshaller(RankReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val pagerankDescriptor: MethodDescriptor[services.BaseReq, services.RankReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "pagerank"))
        .setRequestMarshaller(new Marshaller(BaseReqSerializer))
        .setResponseMarshaller(new Marshaller(RankReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val louvainDescriptor: MethodDescriptor[services.BaseReq, services.ClusterReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "louvain"))
        .setRequestMarshaller(new Marshaller(BaseReqSerializer))
        .setResponseMarshaller(new Marshaller(ClusterReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val shortestPathDescriptor: MethodDescriptor[services.ShortestPathReq, services.ClusterReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "shortestPath"))
        .setRequestMarshaller(new Marshaller(ShortestPathReqSerializer))
        .setResponseMarshaller(new Marshaller(ClusterReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val avgShortestPathDescriptor: MethodDescriptor[services.BaseReq, services.MetricsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "avgShortestPath"))
        .setRequestMarshaller(new Marshaller(BaseReqSerializer))
        .setResponseMarshaller(new Marshaller(MetricsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val avgClusteringDescriptor: MethodDescriptor[services.BaseReq, services.MetricsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "avgClustering"))
        .setRequestMarshaller(new Marshaller(BaseReqSerializer))
        .setResponseMarshaller(new Marshaller(MetricsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val customDescriptor: MethodDescriptor[services.CustomAlgoReq, services.CustomAlgoReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("services.algo", "custom"))
        .setRequestMarshaller(new Marshaller(CustomAlgoReqSerializer))
        .setResponseMarshaller(new Marshaller(CustomAlgoReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
  }
}
