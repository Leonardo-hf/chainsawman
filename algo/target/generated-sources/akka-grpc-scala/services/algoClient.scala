
// Generated by Akka gRPC. DO NOT EDIT.
package services

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcChannel
import akka.grpc.GrpcClientCloseException
import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils

import akka.grpc.AkkaGrpcGenerated

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
@AkkaGrpcGenerated
trait algoClient extends algo with algoClientPowerApi with AkkaGrpcClient

@AkkaGrpcGenerated
object algoClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): algoClient =
    new DefaultalgoClient(GrpcChannel(settings), isChannelOwned = true)
  def apply(channel: GrpcChannel)(implicit sys: ClassicActorSystemProvider): algoClient =
    new DefaultalgoClient(channel, isChannelOwned = false)

  private class DefaultalgoClient(channel: GrpcChannel, isChannelOwned: Boolean)(implicit sys: ClassicActorSystemProvider) extends algoClient {
    import algo.MethodDescriptors._

    private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
    private val settings = channel.settings
    private val options = NettyClientUtils.callOptions(settings)

    
    private def createAlgoRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(createAlgoDescriptor, channel, options, settings)
    
    
    private def queryAlgoRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(queryAlgoDescriptor, channel, options, settings)
    
    
    private def dropAlgoRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(dropAlgoDescriptor, channel, options, settings)
    
    
    private def degreeRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(degreeDescriptor, channel, options, settings)
    
    
    private def pagerankRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(pagerankDescriptor, channel, options, settings)
    
    
    private def louvainRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(louvainDescriptor, channel, options, settings)
    
    
    private def shortestPathRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(shortestPathDescriptor, channel, options, settings)
    
    
    private def avgShortestPathRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(avgShortestPathDescriptor, channel, options, settings)
    
    
    private def avgClusteringRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(avgClusteringDescriptor, channel, options, settings)
    
    
    private def customRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(customDescriptor, channel, options, settings)
    
    

    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer createAlgo(services.CreateAlgoReq) if possible.
     */
    
    override def createAlgo(): SingleResponseRequestBuilder[services.CreateAlgoReq, services.AlgoReply] =
      createAlgoRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of createAlgo
     */
    def createAlgo(in: services.CreateAlgoReq): scala.concurrent.Future[services.AlgoReply] =
      createAlgo().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer queryAlgo(services.Empty) if possible.
     */
    
    override def queryAlgo(): SingleResponseRequestBuilder[services.Empty, services.AlgoReply] =
      queryAlgoRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of queryAlgo
     */
    def queryAlgo(in: services.Empty): scala.concurrent.Future[services.AlgoReply] =
      queryAlgo().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer dropAlgo(services.DropAlgoReq) if possible.
     */
    
    override def dropAlgo(): SingleResponseRequestBuilder[services.DropAlgoReq, services.AlgoReply] =
      dropAlgoRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of dropAlgo
     */
    def dropAlgo(in: services.DropAlgoReq): scala.concurrent.Future[services.AlgoReply] =
      dropAlgo().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer degree(services.BaseReq) if possible.
     */
    
    override def degree(): SingleResponseRequestBuilder[services.BaseReq, services.RankReply] =
      degreeRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of degree
     */
    def degree(in: services.BaseReq): scala.concurrent.Future[services.RankReply] =
      degree().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer pagerank(services.BaseReq) if possible.
     */
    
    override def pagerank(): SingleResponseRequestBuilder[services.BaseReq, services.RankReply] =
      pagerankRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of pagerank
     */
    def pagerank(in: services.BaseReq): scala.concurrent.Future[services.RankReply] =
      pagerank().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer louvain(services.BaseReq) if possible.
     */
    
    override def louvain(): SingleResponseRequestBuilder[services.BaseReq, services.ClusterReply] =
      louvainRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of louvain
     */
    def louvain(in: services.BaseReq): scala.concurrent.Future[services.ClusterReply] =
      louvain().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer shortestPath(services.ShortestPathReq) if possible.
     */
    
    override def shortestPath(): SingleResponseRequestBuilder[services.ShortestPathReq, services.ClusterReply] =
      shortestPathRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of shortestPath
     */
    def shortestPath(in: services.ShortestPathReq): scala.concurrent.Future[services.ClusterReply] =
      shortestPath().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer avgShortestPath(services.BaseReq) if possible.
     */
    
    override def avgShortestPath(): SingleResponseRequestBuilder[services.BaseReq, services.MetricsReply] =
      avgShortestPathRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of avgShortestPath
     */
    def avgShortestPath(in: services.BaseReq): scala.concurrent.Future[services.MetricsReply] =
      avgShortestPath().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer avgClustering(services.BaseReq) if possible.
     */
    
    override def avgClustering(): SingleResponseRequestBuilder[services.BaseReq, services.MetricsReply] =
      avgClusteringRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of avgClustering
     */
    def avgClustering(in: services.BaseReq): scala.concurrent.Future[services.MetricsReply] =
      avgClustering().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer custom(services.CustomAlgoReq) if possible.
     */
    
    override def custom(): SingleResponseRequestBuilder[services.CustomAlgoReq, services.CustomAlgoReply] =
      customRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of custom
     */
    def custom(in: services.CustomAlgoReq): scala.concurrent.Future[services.CustomAlgoReply] =
      custom().invoke(in)
    

    override def close(): scala.concurrent.Future[akka.Done] =
      if (isChannelOwned) channel.close()
      else throw new GrpcClientCloseException()

    override def closed: scala.concurrent.Future[akka.Done] = channel.closed()
  }
}

@AkkaGrpcGenerated
trait algoClientPowerApi {
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer createAlgo(services.CreateAlgoReq) if possible.
   */
  
  def createAlgo(): SingleResponseRequestBuilder[services.CreateAlgoReq, services.AlgoReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer queryAlgo(services.Empty) if possible.
   */
  
  def queryAlgo(): SingleResponseRequestBuilder[services.Empty, services.AlgoReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer dropAlgo(services.DropAlgoReq) if possible.
   */
  
  def dropAlgo(): SingleResponseRequestBuilder[services.DropAlgoReq, services.AlgoReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer degree(services.BaseReq) if possible.
   */
  
  def degree(): SingleResponseRequestBuilder[services.BaseReq, services.RankReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer pagerank(services.BaseReq) if possible.
   */
  
  def pagerank(): SingleResponseRequestBuilder[services.BaseReq, services.RankReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer louvain(services.BaseReq) if possible.
   */
  
  def louvain(): SingleResponseRequestBuilder[services.BaseReq, services.ClusterReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer shortestPath(services.ShortestPathReq) if possible.
   */
  
  def shortestPath(): SingleResponseRequestBuilder[services.ShortestPathReq, services.ClusterReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer avgShortestPath(services.BaseReq) if possible.
   */
  
  def avgShortestPath(): SingleResponseRequestBuilder[services.BaseReq, services.MetricsReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer avgClustering(services.BaseReq) if possible.
   */
  
  def avgClustering(): SingleResponseRequestBuilder[services.BaseReq, services.MetricsReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer custom(services.CustomAlgoReq) if possible.
   */
  
  def custom(): SingleResponseRequestBuilder[services.CustomAlgoReq, services.CustomAlgoReply] = ???
  
  

}
