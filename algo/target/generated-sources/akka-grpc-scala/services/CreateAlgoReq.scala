// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package services

@SerialVersionUID(0L)
final case class CreateAlgoReq(
    name: _root_.scala.Predef.String = "",
    desc: _root_.scala.Predef.String = "",
    params: _root_.scala.Seq[services.Element] = _root_.scala.Seq.empty,
    rets: _root_.scala.Seq[services.Element] = _root_.scala.Seq.empty,
    code: _root_.scala.Predef.String = "",
    `type`: services.Algo.Type = services.Algo.Type.Rank,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CreateAlgoReq] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = desc
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      params.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      rets.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = code
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = `type`.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = desc
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      params.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      rets.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = code
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = `type`.value
        if (__v != 0) {
          _output__.writeEnum(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): CreateAlgoReq = copy(name = __v)
    def withDesc(__v: _root_.scala.Predef.String): CreateAlgoReq = copy(desc = __v)
    def clearParams = copy(params = _root_.scala.Seq.empty)
    def addParams(__vs: services.Element *): CreateAlgoReq = addAllParams(__vs)
    def addAllParams(__vs: Iterable[services.Element]): CreateAlgoReq = copy(params = params ++ __vs)
    def withParams(__v: _root_.scala.Seq[services.Element]): CreateAlgoReq = copy(params = __v)
    def clearRets = copy(rets = _root_.scala.Seq.empty)
    def addRets(__vs: services.Element *): CreateAlgoReq = addAllRets(__vs)
    def addAllRets(__vs: Iterable[services.Element]): CreateAlgoReq = copy(rets = rets ++ __vs)
    def withRets(__v: _root_.scala.Seq[services.Element]): CreateAlgoReq = copy(rets = __v)
    def withCode(__v: _root_.scala.Predef.String): CreateAlgoReq = copy(code = __v)
    def withType(__v: services.Algo.Type): CreateAlgoReq = copy(`type` = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = desc
          if (__t != "") __t else null
        }
        case 3 => params
        case 4 => rets
        case 5 => {
          val __t = code
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(desc)
        case 3 => _root_.scalapb.descriptors.PRepeated(params.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(rets.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PString(code)
        case 6 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: services.CreateAlgoReq.type = services.CreateAlgoReq
    // @@protoc_insertion_point(GeneratedMessage[services.CreateAlgoReq])
}

object CreateAlgoReq extends scalapb.GeneratedMessageCompanion[services.CreateAlgoReq] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[services.CreateAlgoReq] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): services.CreateAlgoReq = {
    var __name: _root_.scala.Predef.String = ""
    var __desc: _root_.scala.Predef.String = ""
    val __params: _root_.scala.collection.immutable.VectorBuilder[services.Element] = new _root_.scala.collection.immutable.VectorBuilder[services.Element]
    val __rets: _root_.scala.collection.immutable.VectorBuilder[services.Element] = new _root_.scala.collection.immutable.VectorBuilder[services.Element]
    var __code: _root_.scala.Predef.String = ""
    var __type: services.Algo.Type = services.Algo.Type.Rank
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 18 =>
          __desc = _input__.readStringRequireUtf8()
        case 26 =>
          __params += _root_.scalapb.LiteParser.readMessage[services.Element](_input__)
        case 34 =>
          __rets += _root_.scalapb.LiteParser.readMessage[services.Element](_input__)
        case 42 =>
          __code = _input__.readStringRequireUtf8()
        case 48 =>
          __type = services.Algo.Type.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    services.CreateAlgoReq(
        name = __name,
        desc = __desc,
        params = __params.result(),
        rets = __rets.result(),
        code = __code,
        `type` = __type,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[services.CreateAlgoReq] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      services.CreateAlgoReq(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        desc = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        params = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[services.Element]]).getOrElse(_root_.scala.Seq.empty),
        rets = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[services.Element]]).getOrElse(_root_.scala.Seq.empty),
        code = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        `type` = services.Algo.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(services.Algo.Type.Rank.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AlgoProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AlgoProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = services.Element
      case 4 => __out = services.Element
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 6 => services.Algo.Type
    }
  }
  lazy val defaultInstance = services.CreateAlgoReq(
    name = "",
    desc = "",
    params = _root_.scala.Seq.empty,
    rets = _root_.scala.Seq.empty,
    code = "",
    `type` = services.Algo.Type.Rank
  )
  implicit class CreateAlgoReqLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, services.CreateAlgoReq]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, services.CreateAlgoReq](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def desc: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.desc)((c_, f_) => c_.copy(desc = f_))
    def params: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[services.Element]] = field(_.params)((c_, f_) => c_.copy(params = f_))
    def rets: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[services.Element]] = field(_.rets)((c_, f_) => c_.copy(rets = f_))
    def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, services.Algo.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val DESC_FIELD_NUMBER = 2
  final val PARAMS_FIELD_NUMBER = 3
  final val RETS_FIELD_NUMBER = 4
  final val CODE_FIELD_NUMBER = 5
  final val TYPE_FIELD_NUMBER = 6
  def of(
    name: _root_.scala.Predef.String,
    desc: _root_.scala.Predef.String,
    params: _root_.scala.Seq[services.Element],
    rets: _root_.scala.Seq[services.Element],
    code: _root_.scala.Predef.String,
    `type`: services.Algo.Type
  ): _root_.services.CreateAlgoReq = _root_.services.CreateAlgoReq(
    name,
    desc,
    params,
    rets,
    code,
    `type`
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[services.CreateAlgoReq])
}
