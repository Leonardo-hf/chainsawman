// Code generated by goctl. DO NOT EDIT.
// Source: algo.proto

package server

import (
	"context"

	"chainsawman/consumer/types/rpc/algo"
	"chainsawman/internal/logic"
	"chainsawman/internal/svc"
)

type AlgoServer struct {
	svcCtx *svc.ServiceContext
	algo.UnimplementedAlgoServer
}

func NewAlgoServer(svcCtx *svc.ServiceContext) *AlgoServer {
	return &AlgoServer{
		svcCtx: svcCtx,
	}
}

func (s *AlgoServer) CreateAlgo(ctx context.Context, in *algo.CreateAlgoReq) (*algo.AlgoReply, error) {
	l := logic.NewCreateAlgoLogic(ctx, s.svcCtx)
	return l.CreateAlgo(in)
}

func (s *AlgoServer) QueryAlgo(ctx context.Context, in *algo.Empty) (*algo.AlgoReply, error) {
	l := logic.NewQueryAlgoLogic(ctx, s.svcCtx)
	return l.QueryAlgo(in)
}

func (s *AlgoServer) DropAlgo(ctx context.Context, in *algo.DropAlgoReq) (*algo.AlgoReply, error) {
	l := logic.NewDropAlgoLogic(ctx, s.svcCtx)
	return l.DropAlgo(in)
}

func (s *AlgoServer) Degree(ctx context.Context, in *algo.BaseReq) (*algo.RankReply, error) {
	l := logic.NewDegreeLogic(ctx, s.svcCtx)
	return l.Degree(in)
}

func (s *AlgoServer) Pagerank(ctx context.Context, in *algo.PageRankReq) (*algo.RankReply, error) {
	l := logic.NewPagerankLogic(ctx, s.svcCtx)
	return l.Pagerank(in)
}

func (s *AlgoServer) Voterank(ctx context.Context, in *algo.VoteRankReq) (*algo.RankReply, error) {
	l := logic.NewVoterankLogic(ctx, s.svcCtx)
	return l.Voterank(in)
}

func (s *AlgoServer) Betweenness(ctx context.Context, in *algo.BaseReq) (*algo.RankReply, error) {
	l := logic.NewBetweennessLogic(ctx, s.svcCtx)
	return l.Betweenness(in)
}

func (s *AlgoServer) Closeness(ctx context.Context, in *algo.BaseReq) (*algo.RankReply, error) {
	l := logic.NewClosenessLogic(ctx, s.svcCtx)
	return l.Closeness(in)
}

func (s *AlgoServer) Louvain(ctx context.Context, in *algo.LouvainReq) (*algo.RankReply, error) {
	l := logic.NewLouvainLogic(ctx, s.svcCtx)
	return l.Louvain(in)
}

func (s *AlgoServer) AvgClustering(ctx context.Context, in *algo.BaseReq) (*algo.MetricsReply, error) {
	l := logic.NewAvgClusteringLogic(ctx, s.svcCtx)
	return l.AvgClustering(in)
}

func (s *AlgoServer) Custom(ctx context.Context, in *algo.CustomAlgoReq) (*algo.CustomAlgoReply, error) {
	l := logic.NewCustomLogic(ctx, s.svcCtx)
	return l.Custom(in)
}
