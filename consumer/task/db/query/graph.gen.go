// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chainsawman/consumer/task/model"
)

func newGraph(db *gorm.DB, opts ...gen.DOOption) graph {
	_graph := graph{}

	_graph.graphDo.UseDB(db, opts...)
	_graph.graphDo.UseModel(&model.Graph{})

	tableName := _graph.graphDo.TableName()
	_graph.ALL = field.NewAsterisk(tableName)
	_graph.ID = field.NewInt64(tableName, "id")
	_graph.Name = field.NewString(tableName, "name")
	_graph.Status = field.NewInt64(tableName, "status")
	_graph.NumNode = field.NewInt64(tableName, "numNode")
	_graph.NumEdge = field.NewInt64(tableName, "numEdge")
	_graph.GroupID = field.NewInt64(tableName, "groupID")
	_graph.CreateTime = field.NewTime(tableName, "createTime")
	_graph.UpdateTime = field.NewTime(tableName, "updateTime")

	_graph.fillFieldMap()

	return _graph
}

type graph struct {
	graphDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String
	Status     field.Int64
	NumNode    field.Int64
	NumEdge    field.Int64
	GroupID    field.Int64
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (g graph) Table(newTableName string) *graph {
	g.graphDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g graph) As(alias string) *graph {
	g.graphDo.DO = *(g.graphDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *graph) updateTableName(table string) *graph {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Name = field.NewString(table, "name")
	g.Status = field.NewInt64(table, "status")
	g.NumNode = field.NewInt64(table, "numNode")
	g.NumEdge = field.NewInt64(table, "numEdge")
	g.GroupID = field.NewInt64(table, "groupID")
	g.CreateTime = field.NewTime(table, "createTime")
	g.UpdateTime = field.NewTime(table, "updateTime")

	g.fillFieldMap()

	return g
}

func (g *graph) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *graph) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["status"] = g.Status
	g.fieldMap["numNode"] = g.NumNode
	g.fieldMap["numEdge"] = g.NumEdge
	g.fieldMap["groupID"] = g.GroupID
	g.fieldMap["createTime"] = g.CreateTime
	g.fieldMap["updateTime"] = g.UpdateTime
}

func (g graph) clone(db *gorm.DB) graph {
	g.graphDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g graph) replaceDB(db *gorm.DB) graph {
	g.graphDo.ReplaceDB(db)
	return g
}

type graphDo struct{ gen.DO }

type IGraphDo interface {
	gen.SubQuery
	Debug() IGraphDo
	WithContext(ctx context.Context) IGraphDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGraphDo
	WriteDB() IGraphDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGraphDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGraphDo
	Not(conds ...gen.Condition) IGraphDo
	Or(conds ...gen.Condition) IGraphDo
	Select(conds ...field.Expr) IGraphDo
	Where(conds ...gen.Condition) IGraphDo
	Order(conds ...field.Expr) IGraphDo
	Distinct(cols ...field.Expr) IGraphDo
	Omit(cols ...field.Expr) IGraphDo
	Join(table schema.Tabler, on ...field.Expr) IGraphDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGraphDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGraphDo
	Group(cols ...field.Expr) IGraphDo
	Having(conds ...gen.Condition) IGraphDo
	Limit(limit int) IGraphDo
	Offset(offset int) IGraphDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGraphDo
	Unscoped() IGraphDo
	Create(values ...*model.Graph) error
	CreateInBatches(values []*model.Graph, batchSize int) error
	Save(values ...*model.Graph) error
	First() (*model.Graph, error)
	Take() (*model.Graph, error)
	Last() (*model.Graph, error)
	Find() ([]*model.Graph, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Graph, err error)
	FindInBatches(result *[]*model.Graph, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Graph) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGraphDo
	Assign(attrs ...field.AssignExpr) IGraphDo
	Joins(fields ...field.RelationField) IGraphDo
	Preload(fields ...field.RelationField) IGraphDo
	FirstOrInit() (*model.Graph, error)
	FirstOrCreate() (*model.Graph, error)
	FindByPage(offset int, limit int) (result []*model.Graph, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGraphDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g graphDo) Debug() IGraphDo {
	return g.withDO(g.DO.Debug())
}

func (g graphDo) WithContext(ctx context.Context) IGraphDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g graphDo) ReadDB() IGraphDo {
	return g.Clauses(dbresolver.Read)
}

func (g graphDo) WriteDB() IGraphDo {
	return g.Clauses(dbresolver.Write)
}

func (g graphDo) Session(config *gorm.Session) IGraphDo {
	return g.withDO(g.DO.Session(config))
}

func (g graphDo) Clauses(conds ...clause.Expression) IGraphDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g graphDo) Returning(value interface{}, columns ...string) IGraphDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g graphDo) Not(conds ...gen.Condition) IGraphDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g graphDo) Or(conds ...gen.Condition) IGraphDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g graphDo) Select(conds ...field.Expr) IGraphDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g graphDo) Where(conds ...gen.Condition) IGraphDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g graphDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGraphDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g graphDo) Order(conds ...field.Expr) IGraphDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g graphDo) Distinct(cols ...field.Expr) IGraphDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g graphDo) Omit(cols ...field.Expr) IGraphDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g graphDo) Join(table schema.Tabler, on ...field.Expr) IGraphDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g graphDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGraphDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g graphDo) RightJoin(table schema.Tabler, on ...field.Expr) IGraphDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g graphDo) Group(cols ...field.Expr) IGraphDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g graphDo) Having(conds ...gen.Condition) IGraphDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g graphDo) Limit(limit int) IGraphDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g graphDo) Offset(offset int) IGraphDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g graphDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGraphDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g graphDo) Unscoped() IGraphDo {
	return g.withDO(g.DO.Unscoped())
}

func (g graphDo) Create(values ...*model.Graph) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g graphDo) CreateInBatches(values []*model.Graph, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g graphDo) Save(values ...*model.Graph) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g graphDo) First() (*model.Graph, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graph), nil
	}
}

func (g graphDo) Take() (*model.Graph, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graph), nil
	}
}

func (g graphDo) Last() (*model.Graph, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graph), nil
	}
}

func (g graphDo) Find() ([]*model.Graph, error) {
	result, err := g.DO.Find()
	return result.([]*model.Graph), err
}

func (g graphDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Graph, err error) {
	buf := make([]*model.Graph, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g graphDo) FindInBatches(result *[]*model.Graph, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g graphDo) Attrs(attrs ...field.AssignExpr) IGraphDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g graphDo) Assign(attrs ...field.AssignExpr) IGraphDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g graphDo) Joins(fields ...field.RelationField) IGraphDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g graphDo) Preload(fields ...field.RelationField) IGraphDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g graphDo) FirstOrInit() (*model.Graph, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graph), nil
	}
}

func (g graphDo) FirstOrCreate() (*model.Graph, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graph), nil
	}
}

func (g graphDo) FindByPage(offset int, limit int) (result []*model.Graph, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g graphDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g graphDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g graphDo) Delete(models ...*model.Graph) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *graphDo) withDO(do gen.Dao) *graphDo {
	g.DO = *do.(*gen.DO)
	return g
}
