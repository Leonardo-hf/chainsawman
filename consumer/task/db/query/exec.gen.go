// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chainsawman/consumer/task/model"
)

func newExec(db *gorm.DB, opts ...gen.DOOption) exec {
	_exec := exec{}

	_exec.execDo.UseDB(db, opts...)
	_exec.execDo.UseModel(&model.Exec{})

	tableName := _exec.execDo.TableName()
	_exec.ALL = field.NewAsterisk(tableName)
	_exec.ID = field.NewInt64(tableName, "id")
	_exec.Status = field.NewInt64(tableName, "status")
	_exec.Params = field.NewString(tableName, "params")
	_exec.AlgoID = field.NewInt64(tableName, "algoID")
	_exec.GraphID = field.NewInt64(tableName, "graphID")
	_exec.Output = field.NewString(tableName, "output")
	_exec.AppID = field.NewString(tableName, "appID")
	_exec.UpdateTime = field.NewTime(tableName, "updateTime")
	_exec.CreateTime = field.NewTime(tableName, "createTime")

	_exec.fillFieldMap()

	return _exec
}

type exec struct {
	execDo

	ALL        field.Asterisk
	ID         field.Int64
	Status     field.Int64
	Params     field.String
	AlgoID     field.Int64
	GraphID    field.Int64
	Output     field.String
	AppID      field.String
	UpdateTime field.Time
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (e exec) Table(newTableName string) *exec {
	e.execDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exec) As(alias string) *exec {
	e.execDo.DO = *(e.execDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exec) updateTableName(table string) *exec {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Status = field.NewInt64(table, "status")
	e.Params = field.NewString(table, "params")
	e.AlgoID = field.NewInt64(table, "algoID")
	e.GraphID = field.NewInt64(table, "graphID")
	e.Output = field.NewString(table, "output")
	e.AppID = field.NewString(table, "appID")
	e.UpdateTime = field.NewTime(table, "updateTime")
	e.CreateTime = field.NewTime(table, "createTime")

	e.fillFieldMap()

	return e
}

func (e *exec) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exec) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["status"] = e.Status
	e.fieldMap["params"] = e.Params
	e.fieldMap["algoID"] = e.AlgoID
	e.fieldMap["graphID"] = e.GraphID
	e.fieldMap["output"] = e.Output
	e.fieldMap["appID"] = e.AppID
	e.fieldMap["updateTime"] = e.UpdateTime
	e.fieldMap["createTime"] = e.CreateTime
}

func (e exec) clone(db *gorm.DB) exec {
	e.execDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exec) replaceDB(db *gorm.DB) exec {
	e.execDo.ReplaceDB(db)
	return e
}

type execDo struct{ gen.DO }

type IExecDo interface {
	gen.SubQuery
	Debug() IExecDo
	WithContext(ctx context.Context) IExecDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExecDo
	WriteDB() IExecDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExecDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExecDo
	Not(conds ...gen.Condition) IExecDo
	Or(conds ...gen.Condition) IExecDo
	Select(conds ...field.Expr) IExecDo
	Where(conds ...gen.Condition) IExecDo
	Order(conds ...field.Expr) IExecDo
	Distinct(cols ...field.Expr) IExecDo
	Omit(cols ...field.Expr) IExecDo
	Join(table schema.Tabler, on ...field.Expr) IExecDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExecDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExecDo
	Group(cols ...field.Expr) IExecDo
	Having(conds ...gen.Condition) IExecDo
	Limit(limit int) IExecDo
	Offset(offset int) IExecDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExecDo
	Unscoped() IExecDo
	Create(values ...*model.Exec) error
	CreateInBatches(values []*model.Exec, batchSize int) error
	Save(values ...*model.Exec) error
	First() (*model.Exec, error)
	Take() (*model.Exec, error)
	Last() (*model.Exec, error)
	Find() ([]*model.Exec, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Exec, err error)
	FindInBatches(result *[]*model.Exec, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Exec) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExecDo
	Assign(attrs ...field.AssignExpr) IExecDo
	Joins(fields ...field.RelationField) IExecDo
	Preload(fields ...field.RelationField) IExecDo
	FirstOrInit() (*model.Exec, error)
	FirstOrCreate() (*model.Exec, error)
	FindByPage(offset int, limit int) (result []*model.Exec, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExecDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e execDo) Debug() IExecDo {
	return e.withDO(e.DO.Debug())
}

func (e execDo) WithContext(ctx context.Context) IExecDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e execDo) ReadDB() IExecDo {
	return e.Clauses(dbresolver.Read)
}

func (e execDo) WriteDB() IExecDo {
	return e.Clauses(dbresolver.Write)
}

func (e execDo) Session(config *gorm.Session) IExecDo {
	return e.withDO(e.DO.Session(config))
}

func (e execDo) Clauses(conds ...clause.Expression) IExecDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e execDo) Returning(value interface{}, columns ...string) IExecDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e execDo) Not(conds ...gen.Condition) IExecDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e execDo) Or(conds ...gen.Condition) IExecDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e execDo) Select(conds ...field.Expr) IExecDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e execDo) Where(conds ...gen.Condition) IExecDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e execDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IExecDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e execDo) Order(conds ...field.Expr) IExecDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e execDo) Distinct(cols ...field.Expr) IExecDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e execDo) Omit(cols ...field.Expr) IExecDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e execDo) Join(table schema.Tabler, on ...field.Expr) IExecDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e execDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExecDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e execDo) RightJoin(table schema.Tabler, on ...field.Expr) IExecDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e execDo) Group(cols ...field.Expr) IExecDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e execDo) Having(conds ...gen.Condition) IExecDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e execDo) Limit(limit int) IExecDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e execDo) Offset(offset int) IExecDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e execDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExecDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e execDo) Unscoped() IExecDo {
	return e.withDO(e.DO.Unscoped())
}

func (e execDo) Create(values ...*model.Exec) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e execDo) CreateInBatches(values []*model.Exec, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e execDo) Save(values ...*model.Exec) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e execDo) First() (*model.Exec, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Exec), nil
	}
}

func (e execDo) Take() (*model.Exec, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Exec), nil
	}
}

func (e execDo) Last() (*model.Exec, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Exec), nil
	}
}

func (e execDo) Find() ([]*model.Exec, error) {
	result, err := e.DO.Find()
	return result.([]*model.Exec), err
}

func (e execDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Exec, err error) {
	buf := make([]*model.Exec, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e execDo) FindInBatches(result *[]*model.Exec, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e execDo) Attrs(attrs ...field.AssignExpr) IExecDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e execDo) Assign(attrs ...field.AssignExpr) IExecDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e execDo) Joins(fields ...field.RelationField) IExecDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e execDo) Preload(fields ...field.RelationField) IExecDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e execDo) FirstOrInit() (*model.Exec, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Exec), nil
	}
}

func (e execDo) FirstOrCreate() (*model.Exec, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Exec), nil
	}
}

func (e execDo) FindByPage(offset int, limit int) (result []*model.Exec, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e execDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e execDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e execDo) Delete(models ...*model.Exec) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *execDo) withDO(do gen.Dao) *execDo {
	e.DO = *do.(*gen.DO)
	return e
}
