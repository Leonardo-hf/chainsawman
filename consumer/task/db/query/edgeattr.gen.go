// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chainsawman/consumer/task/model"
)

func newEdgeAttr(db *gorm.DB, opts ...gen.DOOption) edgeAttr {
	_edgeAttr := edgeAttr{}

	_edgeAttr.edgeAttrDo.UseDB(db, opts...)
	_edgeAttr.edgeAttrDo.UseModel(&model.EdgeAttr{})

	tableName := _edgeAttr.edgeAttrDo.TableName()
	_edgeAttr.ALL = field.NewAsterisk(tableName)
	_edgeAttr.ID = field.NewInt64(tableName, "id")
	_edgeAttr.EdgeID = field.NewInt64(tableName, "edgeID")
	_edgeAttr.Name = field.NewString(tableName, "name")
	_edgeAttr.Desc = field.NewString(tableName, "desc")
	_edgeAttr.Type = field.NewInt64(tableName, "type")

	_edgeAttr.fillFieldMap()

	return _edgeAttr
}

type edgeAttr struct {
	edgeAttrDo

	ALL    field.Asterisk
	ID     field.Int64
	EdgeID field.Int64
	Name   field.String
	Desc   field.String
	Type   field.Int64

	fieldMap map[string]field.Expr
}

func (e edgeAttr) Table(newTableName string) *edgeAttr {
	e.edgeAttrDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e edgeAttr) As(alias string) *edgeAttr {
	e.edgeAttrDo.DO = *(e.edgeAttrDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *edgeAttr) updateTableName(table string) *edgeAttr {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.EdgeID = field.NewInt64(table, "edgeID")
	e.Name = field.NewString(table, "name")
	e.Desc = field.NewString(table, "desc")
	e.Type = field.NewInt64(table, "type")

	e.fillFieldMap()

	return e
}

func (e *edgeAttr) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *edgeAttr) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["id"] = e.ID
	e.fieldMap["edgeID"] = e.EdgeID
	e.fieldMap["name"] = e.Name
	e.fieldMap["desc"] = e.Desc
	e.fieldMap["type"] = e.Type
}

func (e edgeAttr) clone(db *gorm.DB) edgeAttr {
	e.edgeAttrDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e edgeAttr) replaceDB(db *gorm.DB) edgeAttr {
	e.edgeAttrDo.ReplaceDB(db)
	return e
}

type edgeAttrDo struct{ gen.DO }

type IEdgeAttrDo interface {
	gen.SubQuery
	Debug() IEdgeAttrDo
	WithContext(ctx context.Context) IEdgeAttrDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEdgeAttrDo
	WriteDB() IEdgeAttrDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEdgeAttrDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEdgeAttrDo
	Not(conds ...gen.Condition) IEdgeAttrDo
	Or(conds ...gen.Condition) IEdgeAttrDo
	Select(conds ...field.Expr) IEdgeAttrDo
	Where(conds ...gen.Condition) IEdgeAttrDo
	Order(conds ...field.Expr) IEdgeAttrDo
	Distinct(cols ...field.Expr) IEdgeAttrDo
	Omit(cols ...field.Expr) IEdgeAttrDo
	Join(table schema.Tabler, on ...field.Expr) IEdgeAttrDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEdgeAttrDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEdgeAttrDo
	Group(cols ...field.Expr) IEdgeAttrDo
	Having(conds ...gen.Condition) IEdgeAttrDo
	Limit(limit int) IEdgeAttrDo
	Offset(offset int) IEdgeAttrDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEdgeAttrDo
	Unscoped() IEdgeAttrDo
	Create(values ...*model.EdgeAttr) error
	CreateInBatches(values []*model.EdgeAttr, batchSize int) error
	Save(values ...*model.EdgeAttr) error
	First() (*model.EdgeAttr, error)
	Take() (*model.EdgeAttr, error)
	Last() (*model.EdgeAttr, error)
	Find() ([]*model.EdgeAttr, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EdgeAttr, err error)
	FindInBatches(result *[]*model.EdgeAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EdgeAttr) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEdgeAttrDo
	Assign(attrs ...field.AssignExpr) IEdgeAttrDo
	Joins(fields ...field.RelationField) IEdgeAttrDo
	Preload(fields ...field.RelationField) IEdgeAttrDo
	FirstOrInit() (*model.EdgeAttr, error)
	FirstOrCreate() (*model.EdgeAttr, error)
	FindByPage(offset int, limit int) (result []*model.EdgeAttr, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEdgeAttrDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e edgeAttrDo) Debug() IEdgeAttrDo {
	return e.withDO(e.DO.Debug())
}

func (e edgeAttrDo) WithContext(ctx context.Context) IEdgeAttrDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e edgeAttrDo) ReadDB() IEdgeAttrDo {
	return e.Clauses(dbresolver.Read)
}

func (e edgeAttrDo) WriteDB() IEdgeAttrDo {
	return e.Clauses(dbresolver.Write)
}

func (e edgeAttrDo) Session(config *gorm.Session) IEdgeAttrDo {
	return e.withDO(e.DO.Session(config))
}

func (e edgeAttrDo) Clauses(conds ...clause.Expression) IEdgeAttrDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e edgeAttrDo) Returning(value interface{}, columns ...string) IEdgeAttrDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e edgeAttrDo) Not(conds ...gen.Condition) IEdgeAttrDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e edgeAttrDo) Or(conds ...gen.Condition) IEdgeAttrDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e edgeAttrDo) Select(conds ...field.Expr) IEdgeAttrDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e edgeAttrDo) Where(conds ...gen.Condition) IEdgeAttrDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e edgeAttrDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEdgeAttrDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e edgeAttrDo) Order(conds ...field.Expr) IEdgeAttrDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e edgeAttrDo) Distinct(cols ...field.Expr) IEdgeAttrDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e edgeAttrDo) Omit(cols ...field.Expr) IEdgeAttrDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e edgeAttrDo) Join(table schema.Tabler, on ...field.Expr) IEdgeAttrDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e edgeAttrDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEdgeAttrDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e edgeAttrDo) RightJoin(table schema.Tabler, on ...field.Expr) IEdgeAttrDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e edgeAttrDo) Group(cols ...field.Expr) IEdgeAttrDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e edgeAttrDo) Having(conds ...gen.Condition) IEdgeAttrDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e edgeAttrDo) Limit(limit int) IEdgeAttrDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e edgeAttrDo) Offset(offset int) IEdgeAttrDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e edgeAttrDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEdgeAttrDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e edgeAttrDo) Unscoped() IEdgeAttrDo {
	return e.withDO(e.DO.Unscoped())
}

func (e edgeAttrDo) Create(values ...*model.EdgeAttr) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e edgeAttrDo) CreateInBatches(values []*model.EdgeAttr, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e edgeAttrDo) Save(values ...*model.EdgeAttr) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e edgeAttrDo) First() (*model.EdgeAttr, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EdgeAttr), nil
	}
}

func (e edgeAttrDo) Take() (*model.EdgeAttr, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EdgeAttr), nil
	}
}

func (e edgeAttrDo) Last() (*model.EdgeAttr, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EdgeAttr), nil
	}
}

func (e edgeAttrDo) Find() ([]*model.EdgeAttr, error) {
	result, err := e.DO.Find()
	return result.([]*model.EdgeAttr), err
}

func (e edgeAttrDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EdgeAttr, err error) {
	buf := make([]*model.EdgeAttr, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e edgeAttrDo) FindInBatches(result *[]*model.EdgeAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e edgeAttrDo) Attrs(attrs ...field.AssignExpr) IEdgeAttrDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e edgeAttrDo) Assign(attrs ...field.AssignExpr) IEdgeAttrDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e edgeAttrDo) Joins(fields ...field.RelationField) IEdgeAttrDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e edgeAttrDo) Preload(fields ...field.RelationField) IEdgeAttrDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e edgeAttrDo) FirstOrInit() (*model.EdgeAttr, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EdgeAttr), nil
	}
}

func (e edgeAttrDo) FirstOrCreate() (*model.EdgeAttr, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EdgeAttr), nil
	}
}

func (e edgeAttrDo) FindByPage(offset int, limit int) (result []*model.EdgeAttr, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e edgeAttrDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e edgeAttrDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e edgeAttrDo) Delete(models ...*model.EdgeAttr) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *edgeAttrDo) withDO(do gen.Dao) *edgeAttrDo {
	e.DO = *do.(*gen.DO)
	return e
}
